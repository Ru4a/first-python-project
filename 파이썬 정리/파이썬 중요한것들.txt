파이썬 함수 정리
인터프리터에서 텍스트 에디터를 사용함
텍스트 에디터에서 코드를 작성하여 저장후 실행시키면
인터프리터에서 출력된다
CTRL+C로 프로그램을 강제 종료할수 있다.

print("") 출력함수

print함수 부분은
""큰따옴표 안에 있는 부분만 출력한다.
print(""*3)이면 큰따옴표 안에 있는 문자열을 3번을 출력한다.

C언어의 줄바꿈은 \n을 보통 사용하지만
파이썬의 줄바꿈은 \n말고도 """를 사용할 수 있다.
"""를 사용하면 Enter키를 쓴 부분마다 줄이 바뀐다.

문자열의 format()함수를 사용하여
숫자를 문자열로 변환할 수 있게된다.
format함수는 C언어의 printf함수에서 사용하는 %d에서처럼
문자열이 끝나는 부분("{}".format(1))처럼 사용가능하다

파이썬의 조건문에서
들여쓰기를 써야함 
안쓰면 에러난다.(expected an indented block)

조건문에서
c언어는 if와 else if를 사용하지만

파이썬은 if elif else를 사용한다.
처음 조건은 if 중간은 전부 elif를 사용하고 마지막에 else를 사용한다.

파이썬에서 pass를 쓰는 것은 
아직 미구현(개발 도중)이라는 것이다.

import datetime

datetime.datetime.now() 함수는 현재 시간을 구할수 있다.

파이썬은 제로인덱스(Zero_Index)
: 파이썬은 숫자를 0부터 센다.

리스트에 요소 추가
리스트.append(3) : 끝의 인덱스에 3을 추가한다. 
리스트.insert(3,0) : 3번째 인덱스에 0을 추가한다.
del 리스트[2] : 2번째 인덱스의 요소를 제거한다.
리스트.pop(2) : 2번째 인덱스의 요소를 제거한다.
ㄴ 단 요소를 입력하지 않으면 마지막 인덱스를 제거한다.
리스트.clear() : 리스트 내부 요소를 전부 제거한다.

딕셔너리 : 키를 기반으로 값을 저장하는 것
리스트 : 인덱스를 기반으로 값을 저장하는 것

del.딕셔너리[""] : 딕셔너리의 요소 제거

if key in 딕셔너리
:in키워드 딕셔너리 내부에 키가 있는지 없는지 확인할 때도 in키워드 사용

get()함수
: 요소 = 딕셔너리.get("메세지")
if 요소 == None

리스트(list)이든 딕셔너리(dictionary)든
2중으로 중첩되어있으면
반복문을 중첩해서 풀어내야한다.

범위 range()
range(5)			list(range(5))
=range(0,5)		=[0,1,2,3,4]
range(0,5)		list(range(3,5))
=range(0,5)		=[3,4,5]
list(range(0,10,2))
=[0,2,4,6,8]
=0부터 2씩 증가하면서 10까지의 정수를 범위로 만듬

range함수의 매개변수는 꼭!! 정수를 사용해야한다.
int()로 실수를 정수로 바꾸는 것보다는
//라는 정수 나누기 연산자를 많이 사용한다.
reversed()함수를 사용하면 반복문을 반대로 돌릴수있다.

while함수

제너레이터?

리스트를 반전시키는 함수
reversed()
reversed() 함수는 필요한 자리에 직접 써야함

enumerate()함수

for i,value in enumerat(example_list):
	print("{}, {}.".format(i,value))

리스트 내포
for i in range(0,20,2):
	array.append(i*i)
== array = [ i * i for i in range(0,20,2)]

리스트 이름 = [표현식 for 반복자 in 반복할 수 있는 것]

이터레이터?
for 반복자 in 반복할 수 있는 것:
반복할 수 있는 것 == 이터러블(iterable)

2진수, 8진수, 16진수 변환
int("1010",2) /2진수에서 10진수 변환
int("11",8)/8진수에서 10진수 변환
int("1A",16)/16진수에서 10진수 변환
"{:b}".format(10)/10진수에서 2진수 변환
"{:o}".format(10)/10진수에서 8진수 변환
"{:x}".format(10)/10진수에서 16진수 변환

재귀함수 : 함수 안에 자신의 함수를 다시 사용해서 쓰는 함수
global 키워드 : 변수를 함수 밖에서 선언할 때 함수 안에서 쓰고 싶으면 global 키워드를
사용하여 함수 안에서 변수를 사용할 수 있다.
메모화(memo) : 재귀함수는 코드가 간결해지지만 프로그램의 실행 시간이 오래걸릴 수 있다.
이로인해 딕셔너리를 사용하여 메모해두면 처리를 수행하지 않고 메모된 값을 돌려주며 코드의
속도를 빠르게 만드는 것이다.


set()은 집합을 생성하는 함수다.
set([1,2,3,6,4])
집합은 순서를 지키지 않는다. // 1,2,3,4,6
set([1,2,3,4,5,2])
집합은 중복이 되지 않는다. // 1,2,3,4,5
교집합 출력 &// A&B
합집합 출력 |(shift + backslash)// A|B
차집합 출력 -// A-B




